diff -up go/src/pkg/os/os_test.go.fixpath go/src/pkg/os/os_test.go
--- go/src/pkg/os/os_test.go.fixpath	2014-01-16 00:40:48.458254480 +0900
+++ go/src/pkg/os/os_test.go	2014-01-16 00:41:53.926258785 +0900
@@ -848,13 +848,13 @@ func TestOpenNoName(t *testing.T) {
 }
 
 func run(t *testing.T, cmd []string) string {
-	// Run /bin/hostname and collect output.
+	// Run /usr/bin/hostname and collect output.
 	r, w, err := Pipe()
 	if err != nil {
 		t.Fatal(err)
 	}
 	defer r.Close()
-	p, err := StartProcess("/bin/hostname", []string{"hostname"}, &ProcAttr{Files: []*File{nil, w, Stderr}})
+	p, err := StartProcess("/usr/bin/hostname", []string{"hostname"}, &ProcAttr{Files: []*File{nil, w, Stderr}})
 	if err != nil {
 		t.Fatal(err)
 	}
@@ -888,14 +888,14 @@ func TestHostname(t *testing.T) {
 		return
 	}
 
-	// Check internal Hostname() against the output of /bin/hostname.
+	// Check internal Hostname() against the output of /usr/bin/hostname.
 	// Allow that the internal Hostname returns a Fully Qualified Domain Name
-	// and the /bin/hostname only returns the first component
+	// and the /usr/bin/hostname only returns the first component
 	hostname, err := Hostname()
 	if err != nil {
 		t.Fatalf("%v", err)
 	}
-	want := run(t, []string{"/bin/hostname"})
+	want := run(t, []string{"/usr/bin/hostname"})
 	if hostname != want {
 		i := strings.Index(hostname, ".")
 		if i < 0 || hostname[0:i] != want {
